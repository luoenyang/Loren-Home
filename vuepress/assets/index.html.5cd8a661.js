import{_ as s,p as a}from"./app.e6691f45.js";const p={};function t(o,n){return n[0]||(n[0]=a(`<h3 id="axios\u662F\u4EC0\u4E48" tabindex="-1"><a class="header-anchor" href="#axios\u662F\u4EC0\u4E48" aria-hidden="true">#</a> axios\u662F\u4EC0\u4E48</h3><p>\u6613\u7528\u3001\u7B80\u6D01\u4E14\u9AD8\u6548\u7684http\u5E93\uFF0C \u652F\u6301node\u7AEF\u548C\u6D4F\u89C8\u5668\u7AEF\uFF0C\u652F\u6301Promise\uFF0C\u652F\u6301\u62E6\u622A\u5668\u7B49\u9AD8\u7EA7\u914D\u7F6E\u3002<br> \u524D\u540E\u53F0\u5747\u53EF\u7528\u3002</p><blockquote><p>\u7C7B\u4F3C$.ajax<br> post\u8BF7\u6C42\uFF1A \u4E0D\u7BA1\u8BF7\u6C42\u5934\u662Fjson\u8FD8\u662Fform\uFF0C\u53C2\u6570\u4F53key \u90FD\u662F data<br> get\u8BF7\u6C42\uFF1A params:{}</p></blockquote><h3 id="\u7B80\u5355\u8BF7\u6C42-\u65B9\u5F0F-application-x-www-form-urlencoded" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u8BF7\u6C42-\u65B9\u5F0F-application-x-www-form-urlencoded" aria-hidden="true">#</a> \u7B80\u5355\u8BF7\u6C42 \u65B9\u5F0F\uFF1Aapplication/x-www-form-urlencoded</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> dv <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">f</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> postData<span class="token punctuation">,</span>isFormHeader<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> dv <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span><span class="token operator">&amp;&amp;</span>isFormHeader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> dv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> v <span class="token operator">=</span> dv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5224\u65AD\u53C2\u6570\u503C\u662F\u5426\u662F\u6570\u7EC4</span>
        <span class="token comment">// dv[i] = v &amp;&amp; Array.isArray(v) ? JSON.stringify(v) : v;</span>
        
        <span class="token comment">// \u6570\u7EC4[]\u6216\u662F\u5BF9\u8C61{}</span>
        <span class="token comment">// \u5C06\u53C2\u6570\u5E8F\u5217\u5316\u4E3AJSON\u683C\u5F0F</span>
        dv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> v <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5E8F\u5217\u5316\u4E3AURL\u7F16\u7801\u683C\u5F0F\u7684\u5B57\u7B26\u4E32 \u4F7F\u7528 qs.stringify \u5E8F\u5217\u5316\u5BF9\u8C61\uFF0C\u5E76\u8BBE\u7F6E allowDots: true \u4EE5\u4FBF\u652F\u6301\u70B9\u7B26\u53F7</span>
    postData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dv<span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token literal-property property">allowDots</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    postData<span class="token operator">=</span>dv<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://example.com/api&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> isFormHeader<span class="token operator">?</span><span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token operator">:</span> <span class="token string">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> postData<span class="token punctuation">,</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// axios.post(&#39;https://example.com/api&#39;,postData, {</span>
<span class="token comment">//   headers: {</span>
<span class="token comment">//     &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;</span>
<span class="token comment">//   }</span>
<span class="token comment">// })</span>
<span class="token comment">// .then(response =&gt; console.log(response.data))</span>
<span class="token comment">// .catch(error =&gt; console.error(error));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="\u5C01\u88C5\u8BF7\u6C42" tabindex="-1"><a class="header-anchor" href="#\u5C01\u88C5\u8BF7\u6C42" aria-hidden="true">#</a> \u5C01\u88C5\u8BF7\u6C42</h3><details class="custom-container details"><summary>\u67E5\u770B</summary><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElMessageBox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span>
<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">&#39;qs&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u81EA\u5E26 \u76F4\u63A5\u5F15\u5165</span>

<span class="token keyword">const</span> httpUtil <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * post\u8BF7\u6C42
     * \u628Aaxios\u7684\u8BF7\u6C42\u65B9\u5F0F\u6539\u6210\u7B26\u5408\u6211\u4EEC\u7684\u4F7F\u7528\u4E60\u60EF
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">url</span> \u8BF7\u6C42\u8DEF\u5F84
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">params</span> \u8BF7\u6C42\u53C2\u6570
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">callback</span> \u8BF7\u6C42\u6210\u529F\u56DE\u8C03
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Boolean<span class="token punctuation">}</span></span> <span class="token parameter">isJson</span> \u662F\u5426\u662Fapplication/json\u65B9\u5F0F\u8BF7\u6C42
     */</span>

    <span class="token comment">// \u56DE\u8C03\u7684\u65B9\u5F0F\u5904\u7406\u8BF7\u6C42\u540E\u7684\u6570\u636E\uFF08\u56DE\u8C03\u51FD\u6570\u7684\u65B9\u5F0F\uFF0C\u975E\u8FD4\u56DEpromise\uFF09</span>
    <span class="token function-variable function">post</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span>isJson<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> cfg <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            headers<span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">;</span>
            <span class="token comment">// \u8FD9\u4E2A\u597D\u50CF\u662F\u4E0D\u5BF9\u7684  \u90FD\u8981\u7528data</span>
            <span class="token comment">// cfg.params = params;</span>
            cfg<span class="token punctuation">.</span>data <span class="token operator">=</span> params<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            headers<span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">;</span>

            <span class="token comment">// url\u5B57\u7B26\u4E32\u5F62\u5F0F\u63D0\u4EA4\uFF08\u53C2\u6570\u503C\u90FD\u5E94\u8F6C\u5316\u4E3A\u5B57\u7B26\u4E32/json\u5B57\u7B26\u4E32 \u5982{a:1,b:2} ==&gt; a=1&amp;b=2\uFF09</span>

            <span class="token comment">// ***** \u4F7F\u7528\uFF1AURLSearchParams *****</span>
            <span class="token comment">// \u5728\u5C06\u6570\u636E\u8F6C\u6362\u4E3A URLSearchParams \u65F6\uFF0Caxios \u4F1A\u81EA\u52A8\u5C06\u5BF9\u8C61\u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\uFF0C\u5E76\u8FDB\u884C\u7F16\u7801\u3002</span>
            <span class="token comment">// cfg.data = new URLSearchParams({a: 1, c: [2, 3]}).toString();</span>

            <span class="token comment">// ***** \u4F7F\u7528\uFF1AQs *****</span>
            <span class="token comment">// \u5982\u679C\u53C2\u6570\u503C\u662F\u6570\u7EC4\uFF0C\u9700\u5148\u5C06\u6570\u7EC4\u8F6C\u5316\u6210json\u5B57\u7B26\u4E32\uFF0C\u5426\u5219axios\u6700\u7EC8\u63D0\u4EA4\u7684\u53C2\u6570\u683C\u5F0F\u4F1A\u9519\u8BEF\uFF0C\u5F53\u7136\u4E5F\u53EF\u4EE5\u5728\u4F20\u5165\u4E4B\u524D\u5C31\u8F6C</span>
            <span class="token comment">// \u5982\u679C\u53C2\u6570\u503C\u662F\u6570\u7EC4\uFF0Cqs\u65E0\u6CD5\u6B63\u5E38\u8F6C\u5316\u5B83\u4F1A\u5C06\u6570\u7EC4\u8FDB\u884C\u62C6\u5206 \u800C\u4E0D\u662F\u4E00\u4E2A\u6574\u4F53\u4E86</span>
            <span class="token comment">// \u5982\u679C\u662F\u5BF9\u8C61\u5982{a:1}\u5219\u4E0D\u9700\u8981\uFF0C\u4F7F\u7528qs\u8F6C\u5373\u53EF</span>
            

            <span class="token comment">// \u4F20\u5165\u7684\u662F\u4E2A\u5BF9\u8C61{}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> params <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> v <span class="token operator">=</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u5224\u65AD\u53C2\u6570\u503C\u662F\u5426\u662F\u6570\u7EC4</span>
                    <span class="token comment">// params[i] = v &amp;&amp; Array.isArray(v) ? JSON.stringify(v) : v;</span>

                    <span class="token comment">// \u6570\u7EC4[]\u6216\u662F\u5BF9\u8C61{}</span>
                    <span class="token comment">// \u5C06\u53C2\u6570\u5E8F\u5217\u5316\u4E3AJSON\u683C\u5F0F</span>
                    params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> v <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> v<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5E8F\u5217\u5316\u4E3AURL\u7F16\u7801\u683C\u5F0F\u7684\u5B57\u7B26\u4E32</span>
            cfg<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dv<span class="token punctuation">)</span><span class="token punctuation">;</span>         
        <span class="token punctuation">}</span>
        cfg<span class="token punctuation">.</span>headers <span class="token operator">=</span> headers<span class="token punctuation">;</span>

        axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">rs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> rsData <span class="token operator">=</span> rs<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">callback</span><span class="token punctuation">(</span>rsData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u9519\u8BEF\u63D0\u793A</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">&#39;401&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;/#/login&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                ElMessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;\u670D\u52A1\u5668\u6216\u7F51\u7EDC\u9519\u8BEF\uFF01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ElMessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;\u8BF7\u6C42\u9519\u8BEF\uFF01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// \u56DE\u8C03</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">callback</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// \u8FD4\u56DE\u4E00\u4E2Apromise</span>
    <span class="token function-variable function">asyncPost</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span>isJson</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> cfg <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            headers<span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">;</span>
            <span class="token comment">// \u8FD9\u4E2A\u597D\u50CF\u662F\u4E0D\u5BF9\u7684  \u90FD\u8981\u7528data</span>
            <span class="token comment">// cfg.params = params;</span>
            cfg<span class="token punctuation">.</span>data <span class="token operator">=</span> params<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// url\u5B57\u7B26\u4E32\u5F62\u5F0F\u63D0\u4EA4\uFF08\u53C2\u6570\u503C\u90FD\u5E94\u8F6C\u5316\u4E3A\u5B57\u7B26\u4E32/json\u5B57\u7B26\u4E32 \u5982{a:1,b:2} ==&gt; a=1&amp;b=2\uFF09</span>
            headers<span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">;</span>
            <span class="token comment">// \u5982\u679C\u53C2\u6570\u503C\u662F\u6570\u7EC4\uFF0C\u9700\u5148\u5C06\u6570\u7EC4\u8F6C\u5316\u6210json\u5B57\u7B26\u4E32\uFF0C\u5426\u5219axios\u6700\u7EC8\u63D0\u4EA4\u7684\u53C2\u6570\u683C\u5F0F\u4F1A\u9519\u8BEF\uFF0C\u5F53\u7136\u4E5F\u53EF\u4EE5\u5728\u4F20\u5165\u4E4B\u524D\u5C31\u8F6C</span>
            <span class="token comment">// \u5982\u679C\u53C2\u6570\u503C\u662F\u6570\u7EC4\uFF0Cqs\u65E0\u6CD5\u6B63\u5E38\u8F6C\u5316\u5B83\u4F1A\u5C06\u6570\u7EC4\u8FDB\u884C\u62C6\u5206 \u800C\u4E0D\u662F\u4E00\u4E2A\u6574\u4F53\u4E86</span>
            <span class="token comment">// \u5982\u679C\u662F\u5BF9\u8C61\u5982{a:1}\u5219\u4E0D\u9700\u8981\uFF0C\u4F7F\u7528qs\u8F6C\u5373\u53EF</span>

            <span class="token comment">// \u4F20\u5165\u7684\u662F\u4E2A\u5BF9\u8C61{}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> params <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> v <span class="token operator">=</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u5224\u65AD\u53C2\u6570\u503C\u662F\u5426\u662F\u6570\u7EC4</span>
                    <span class="token comment">// params[i] = v &amp;&amp; Array.isArray(v) ? JSON.stringify(v) : v;</span>

                    <span class="token comment">// \u6570\u7EC4[]\u6216\u662F\u5BF9\u8C61{}</span>
                    <span class="token comment">// \u5C06\u53C2\u6570\u5E8F\u5217\u5316\u4E3AJSON\u683C\u5F0F</span>
                    params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> v <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> v<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5E8F\u5217\u5316\u4E3AURL\u7F16\u7801\u683C\u5F0F\u7684\u5B57\u7B26\u4E32</span>
            cfg<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
        cfg<span class="token punctuation">.</span>headers <span class="token operator">=</span> headers<span class="token punctuation">;</span>

        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>success <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u4F20\u5165\u7684\u662F\u4E2A\u5BF9\u8C61{}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> params <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> v <span class="token operator">=</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// \u5224\u65AD\u53C2\u6570\u503C\u662F\u5426\u662F\u6570\u7EC4</span>
                <span class="token comment">// params[i] = v &amp;&amp; Array.isArray(v) ? JSON.stringify(v) : v;</span>

                <span class="token comment">// \u6570\u7EC4[]\u6216\u8005\u5BF9\u8C61{}</span>
                <span class="token comment">// \u5C06\u53C2\u6570\u5E8F\u5217\u5316\u4E3AJSON\u683C\u5F0F</span>
                params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> v <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">params</span><span class="token operator">:</span> params
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">rs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> rsData <span class="token operator">=</span> rs<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>rsData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ElMessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;\u670D\u52A1\u5668\u6216\u7F51\u7EDC\u9519\u8BEF\uFF01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ElMessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;\u8BF7\u6C42\u9519\u8BEF\uFF01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function-variable function">getFile</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u5F00\u59CB\u4E0B\u8F7D\u6587\u4EF6\uFF1A&#39;</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4F20\u5165\u7684\u662F\u4E2A\u5BF9\u8C61{}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> params <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> v <span class="token operator">=</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// \u5224\u65AD\u53C2\u6570\u503C\u662F\u5426\u662F\u6570\u7EC4</span>
                <span class="token comment">// params[i] = v &amp;&amp; Array.isArray(v) ? JSON.stringify(v) : v;</span>

                <span class="token comment">// \u6570\u7EC4[]\u6216\u8005\u5BF9\u8C61{}</span>
                <span class="token comment">// \u5C06\u53C2\u6570\u5E8F\u5217\u5316\u4E3AJSON\u683C\u5F0F</span>
                params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> v <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&#39;blob&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">params</span><span class="token operator">:</span> params
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">rs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> rsData <span class="token operator">=</span> rs<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">callback</span><span class="token punctuation">(</span>rsData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ElMessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;\u670D\u52A1\u5668\u6216\u7F51\u7EDC\u9519\u8BEF\uFF01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ElMessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;\u8BF7\u6C42\u9519\u8BEF\uFF01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    
    <span class="token function-variable function">postFile</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> formData<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">failure</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> httpUtil<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br></div></div></details>`,7))}var c=s(p,[["render",t],["__file","index.html.vue"]]);export{c as default};
